<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!--
		* root-context.xml 파일
		스프링과 관련된 전반적인 환경설정을 해주는 파일
		서버 구동과 동시에 web.xml 파일을 거쳐서 두번째로 로딩되어 읽혀지는 문서
		=> 주로 서버 구동 직후에 곧바로 셋팅되야 하는 파트에 대해 셋팅해주는 영역
		예) DB 연동 설정, 트랜잭션 처리 설정, 내외부 모듈 설정 등등
	-->
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!--
		* Spring 의 Bean
		Spring framework 적용 전에는 개발자인 내가 직접 new 구문을 통해 객체를 생성해서 사용했었음
		하지만 Spring framework 에서는 개발자인 내가 직접 객체를 생성할 일이 거의 없고 (가능은 함)
		Spring 이 자바 객체들을 생성시켜서 내가 필요할 때마다 제시해줄 것 (IOC, DI)
		
		이제는 Spring 이 알아서 객체를 생성시켜줄 수 있게끔 등록해줄 것 (xml 파일에)
		=> Bean 으로 등록하겠다. 라고 표현함 (Bean == 자바 객체 == 도구)
		=> 클래스를 필요할 때마다 객체가 생성될 수 있게끔 Bean 으로 등록시켜놓는 과정
		
		* Bean 등록 방법
		1. xml 파일로 등록하는 방법 : 내가 직접 만든 클래스가 아닐 경우 (내가 코드를 건들일 수 없는 경우)
		2. 어노테이션을 이용하여 등록하는 방법 : 내가 직접 만든 클래스일 경우 (내가 코드를 건들일 수 있는 경우)
	
		* Spring 의 Bean 관리
		1. root-context.xml, servlet-context.xml 파일에 등록했던 Bean,
		     어노테이션을 이용해서 등록했던 Bean 들이 서버 구동 시 읽혀지면서 등록됨
		2. Spring Container 라는 도구 창고에 등록한 Bean 들이 들어가 있을 것임
		3. Spring Container 로부터 객체가 필요할 때마다 꺼내 쓸 예정
	-->	
	
	<!-- DB 연동과 관련된 객체들을 Bean 으로 등록하기 -->
	<!-- 1단계. DB 연결을 위한 도구를 설정 -->
	<!-- beans:bean 접두어가 생략된 형태 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource"
														destroy-method="close">
		<!-- 어느 DB 에 접속할건지 지정 -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="SUIM" />
		<property name="password" value="SUIM" />
	</bean>
	
	<!--
		해당 BasicDataSource 객체가 필요할 때마다 내부적으로 이 코드가 실행됨
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
		dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
		dataSource.setUsername("SPRING");
		dataSource.setPassword("SPRING");
	-->
	
	<!-- 2단계. MyBatis Spring 에서 제공하는 SQL 명령어 실행을 위한 도구 등록 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<!-- MyBatis 의 설정파일의 위치를 지정홰서 설정값들을 읽어들일 수 있게끔 해줄 것 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- DB 연결을 위한 도구를 참조 설정 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!--
		해당 SqlSessionFactoryBean 객체가 필요할 때마다 내부적으로 이 코드가 실행됨
		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
		sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
		sqlSessionFactory.setDataSource(dataSource); // 1단계에서 만든 객체를 필드값으로 넣어버림
	-->
	
	<!-- 3단계. SQL 구문 실행을 위한 템플릿을 제공하는 도구 등록 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<!-- SQL 명령어 실행을 위한 도구를 참조 설정 -->
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!--
		해당 SqlSessionTemplate 객체가 필요할 때마다 내부적으로 이 코드가 실행됨
		SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory);
	-->
	
	<!--
		* property 로 셋팅하는 경우 : setter 주입
		* constructor-arg 로 셋팅하는 경우 : 생성자 주입
	-->
	
	<!--
		* 순수 마이바티스와의 차이점
		- 순수 마이바티스
		SqlSessionFactoryBuilder 객체 -> SqlSessionFactory 객체 -> SqlSession 객체
																insert
																update
																delete
																selectOne
																selectList 메소드 활용 가능
		- MyBatis Spring
		SqlSessionFactoryBean 객체 -> SqlSessionTemplate 객체
									 insert
									 update
									 delete
									 selectOne
									 selectList 메소드 활용 가능
	-->
	
	<!-- 파일 업로드 관련 빈 등록 -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<!-- 최대 업로드 가능한 파일의 크기를 설정 -->
		<property name="maxUploadSize" value="10000000" />
		<!-- defaultEncoding : 업로드 되는 파일에 대한 인코딩 처리를 어떻게 할건지 지정 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- maxInMemorySize : 메모리 상의 파일 최대 용량 -->
		<property name="maxInMemorySize" value="10000000" />
	</bean>
	
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	   <property name="host" value="smtp.gmail.com" />
	   <property name="port" value="25" />
	   <property name="username" value="suimm012@gmail.com" />
	   <property name="password" value="wrclnfcdosefvdrn" />
	
	   <!-- email 전송 시 필요한 SMTP 지정 -->
	   <property name="javaMailProperties">
	      <props>
	         <prop key="mail.transport.protocol">smtp</prop>
	         <prop key="mail.smtp.auth">true</prop>
	         <prop key="mail.smtp.starttls.enable">true</prop>
	      </props>
	   </property>
	</bean>
	
</beans>