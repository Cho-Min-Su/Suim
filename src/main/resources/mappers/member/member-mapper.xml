<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">


	<!-- MEMBER 테이블로부터 조회된 ResultSet 에 들은 데이터를 Member VO 로 가공해주는 용도 -->
	<resultMap id="memberResultSet" type="member">
		<result column="MEMBER_ID" property="memberId" />
		<result column="MEMBER_PWD" property="memberPwd" />
		<result column="MEMBER_NAME" property="memberName" />
		<result column="NICKNAME" property="nickName" />
		<result column="PHONE" property="phone" />
		<result column="EMAIL" property="email" />
		<result column="GENDER" property="gender" />
		<result column="AREA" property="area" />
		<result column="BIRTH" property="birth" />
		<result column="ENROLL_DATE" property="enrollDate" />
		<result column="MODIFY_DATE" property="modifyDate" />
		<result column="LOGIN_DATE" property="loginDate" />
		<result column="STATUS" property="status" />
		<result column="CHANGE_NAME" property="changeName" />
		<result column="MEMBER_POINT" property="memberPoint" />
		<result column="MEMBER_COMMENT" property="memberComment" />
		<result column="NAVERLOGIN" property="naverLogin" />
		<result column="GOOGLELOGIN" property="googleLogin" />
		<result column="LATITUDE" property="latitude" />
		<result column="LONGITUDE" property="longitude" />
		<result column="ADMIN_AUTH" property="adminAuth" />
	</resultMap>

	<!-- 로그인용 쿼리문 -->
	<select id="loginMember" parameterType="member"
		resultMap="memberResultSet">
   		SELECT M.*, MA.ADMIN_AUTH, MA.SET_ALARM
          FROM MEMBER M
          JOIN MEMBER_AUTH MA ON (M.EMAIL = MA.EMAIL)
		 WHERE M.MEMBER_ID = #{memberId}
		   AND M.STATUS = '일반'
	</select>
	
	<select id="selectMember" parameterType="String"
		resultMap="memberResultSet">
		SELECT * FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
		AND STATUS = '일반'
	</select>
	

	<!-- 일반 회원가입용 쿼리문 -->
	<insert id="insertMember"
		parameterType="com.suim.member.model.vo.SignUp">
		INSERT INTO MEMBER(MEMBER_ID
		, MEMBER_PWD
		, MEMBER_NAME
		,
		NICKNAME
		, PHONE
		, EMAIL
		, GENDER
		, AREA
		, BIRTH
		, LATITUDE
		, LONGITUDE)
		VALUES(#{memberId}
		,
		#{memberPwd}
		, #{memberName}
		, #{nickName}
		, #{phone}
		, #{email}
		,
		#{gender}
		, #{area}
		, #{birth}
		, #{latitude}
		, #{longitude})
	</insert>


	<!-- 소셜로그인용 회원가입 -->
	<insert id="insertApiMember" parameterType="member">
		INSERT INTO
		MEMBER(MEMBER_ID
		, MEMBER_PWD
		, MEMBER_NAME
		, NICKNAME
		, PHONE
		, EMAIL
		,
		GENDER
		, AREA
		, BIRTH
		, LATITUDE
		, LONGITUDE)
		VALUES(#{memberId}
		, #{memberPwd}
		, #{memberName}
		,
		#{nickName}
		, #{phone}
		, #{email}
		, #{gender}
		, #{area}
		, #{birth}
		, #{latitude}
		, #{longitude})
	</insert>

	<!-- 로그인용 쿼리문 -->
	<select id="nickCheck" parameterType="string" resultType="_int">
		SELECT
		COUNT(*)
		FROM MEMBER
		WHERE NICKNAME = #{nickName}
	</select>

	<!-- 아이디 중복체크용 쿼리문 -->
	<select id="idCheck" parameterType="string" resultType="_int">
		SELECT
		COUNT(*)
		FROM MEMBER
		WHERE MEMBER_ID = #{checkId}
	</select>

	<!-- 이메일 중복 체크 -->
	<select id="emailCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>

	<!-- 휴대폰 중복 체크 -->
	<select id="phoneCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE PHONE = #{phone}
	</select>

	<!-- 네이버 로그인이 연동되어 있는지 체크 -->
	<select id="naverConnectionCheck" parameterType="string"
		resultType="map">
		SELECT EMAIL, NAVERLOGIN
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>

	<!-- 이메일이 일치한 회원 네이버 로그인 연동 시키기 -->
	<select id="setNaverConnection" parameterType="hashmap">
		UPDATE MEMBER
		SET NAVERLOGIN = #{id}
		WHERE EMAIL = #{email}
	</select>

	<!-- 네이버 로그인 연동이 되어있는 회원 찾기 -->
	<select id="userNaverLoginPro" parameterType="hashmap"
		resultMap="memberResultSet">
		SELECT *
		FROM MEMBER
		WHERE EMAIL = #{email} AND NAVERLOGIN = #{id}
		AND STATUS = '일반'
	</select>
	
	
	<!-- 구글 로그인이 연동되어 있는지 체크 -->
	<select id="googleConnectionCheck" parameterType="string"
		resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>

	<!-- 이메일이 일치한 회원 네이버 로그인 연동 시키기 -->
	<select id="setGoogleConnection" parameterType="member">
		UPDATE MEMBER
		SET GOOGLELOGIN = #{googleLogin}
		WHERE EMAIL = #{email}
	</select>

	<!-- 구글 로그인 연동이 되어있는 회원 찾기 -->
	<select id="userGoogleLoginPro" parameterType="member"
		resultMap="memberResultSet">
		SELECT *
		FROM MEMBER
		WHERE EMAIL = #{email} AND GOOGLELOGIN = #{googleLogin}
		AND STATUS = '일반'
	</select>
	
	
	
	
	
	
	
	
	
	
	

	<!-- 회원 정보 수정용 쿼리문 -->
	<update id="updateMember" parameterType="member">
		UPDATE MEMBER
		SET
		<if test="memberPwd != null">MEMBER_PWD = #{memberPwd},</if>
		<if test="memberName != null">MEMBER_NAME = #{memberName},</if>
		<if test="nickName != null">NICKNAME = #{nickName},</if>
		<if test="phone != null">PHONE = #{phone},</if>
		<if test="gender != null">GENDER = #{gender},</if>
		<if test="birth != null">BIRTH = #{birth},</if>
		<if test="area != null">AREA = #{area},</if>
		<if test="changeName != null">CHANGE_NAME = #{changeName},</if>
		<if test="latitude != null">LATITUDE = #{latitude}</if>,
		<if test="longitude != null">LONGITUDE = #{longitude}</if>,
		MODIFY_DATE = SYSDATE,
		MEMBER_COMMENT = #{memberComment}
		WHERE MEMBER_ID
		= #{memberId}
	</update>
	
	<select id="findMemberId" parameterType="member"
		resultType="string">
	SELECT MEMBER_ID FROM MEMBER
	WHERE MEMBER_NAME = #{memberName}
	AND EMAIL = #{email}	
	</select>
	
	<select id="findMemberPw" parameterType="member"
		resultType="_int">
	SELECT COUNT(*) FROM MEMBER
	WHERE MEMBER_ID = #{memberId}
	AND EMAIL = #{email}	
	</select>
	
	
	<!-- 로그인 업데이트 쿼리문 -->
	<update id="updateLoginDate" parameterType="string">
		UPDATE MEMBER
		SET LOGIN_DATE
		= SYSDATE
		WHERE MEMBER_ID = #{memberId}
	</update>
	
	
	
	

	<!-- 회원 탈퇴용 쿼리문 -->
	<update id="deleteMember" parameterType="string">
		UPDATE MEMBER
		SET STATUS
		= '탈퇴'
		, MODIFY_DATE = SYSDATE
		WHERE MEMBER_ID = #{memberId}
	</update>


</mapper>